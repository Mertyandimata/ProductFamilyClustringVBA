Sub ProcessAndReportData()
    Dim ws As Worksheet, reportWs As Worksheet
    Dim lastRow As Long, i As Long, j As Long, dabPnCol As Long
    Dim dabPn As String, sheetName As Variant
    Dim sourceSheets As Variant, dabPnDict As Object
    Dim reportLastRow As Long, foundCell As Range
    Dim startRow As Long
    
    Application.ScreenUpdating = False
    Application.Calculation = xlCalculationManual
    
    sourceSheets = Array("Scala1", "Unilift APG", "MMS", "Sololift components")
    Set reportWs = ThisWorkbook.Sheets("Report")
    Set dabPnDict = CreateObject("Scripting.Dictionary")
    
    
    startRow = reportWs.Cells(reportWs.Rows.Count, "C").End(xlUp).Row + 1
    If startRow < 6 Then startRow = 6
    
    
    For Each sheetName In sourceSheets
        Set ws = ThisWorkbook.Sheets(sheetName)
        dabPnCol = Application.Match("*DAB p/n*", ws.Rows(1), 0)
        
        If Not IsError(dabPnCol) Then
            lastRow = ws.Cells(ws.Rows.Count, dabPnCol).End(xlUp).Row
            
            
            For i = 2 To lastRow
                dabPn = Trim(CStr(ws.Cells(i, dabPnCol).Value))
                If dabPn <> "" Then
                    If dabPnDict.Exists(dabPn) Then
                        If InStr(1, dabPnDict(dabPn), CStr(sheetName)) = 0 Then
                            dabPnDict(dabPn) = dabPnDict(dabPn) & ", " & sheetName
                        End If
                    Else
                        dabPnDict(dabPn) = CStr(sheetName)
                    End If
                End If
            Next i
        End If
    Next sheetName
    
    
    Dim key As Variant
    j = startRow
    
    
    reportWs.Range("A" & startRow & ":A" & reportWs.Rows.Count).ClearContents
    reportWs.Range("C" & startRow & ":C" & reportWs.Rows.Count).ClearContents
    
    For Each key In dabPnDict.Keys
        Set foundCell = reportWs.Range("C6:C" & reportWs.Rows.Count).Find(key, LookIn:=xlValues, LookAt:=xlWhole)
        If Not foundCell Is Nothing Then
            
            foundCell.Offset(0, -2).Value = dabPnDict(key)
            
            
            Dim firstAddress As String
            firstAddress = foundCell.Address
            Do
                Set foundCell = reportWs.Range("C6:C" & reportWs.Rows.Count).FindNext(foundCell)
                If Not foundCell Is Nothing Then
                    If foundCell.Address = firstAddress Then
                        Exit Do
                    Else
                        foundCell.Offset(0, -2).Value = dabPnDict(key)
                    End If
                Else
                    Exit Do
                End If
            Loop
        Else
        
            reportWs.Cells(j, "A").Value = dabPnDict(key)
            reportWs.Cells(j, "C").Value = key
            j = j + 1
        End If
    Next key
    
   
    lastRow = reportWs.Cells(reportWs.Rows.Count, "C").End(xlUp).Row
    For i = startRow To lastRow
        If reportWs.Cells(i, "A").Value = "" And reportWs.Cells(i, "C").Value <> "" Then
            reportWs.Cells(i, "A").Value = "No Match"
        End If
    Next i
    
    Application.ScreenUpdating = True
    Application.Calculation = xlCalculationAutomatic
    
    DataTransfer
    
    MsgBox "Process completed!", vbInformation
End Sub

Sub DataTransfer()
    Dim ws As Worksheet
    Dim wsNew As Worksheet
    Dim wsSPF As Worksheet
    Dim lastRow As Long
    Dim i As Long
    Dim j As Long
    Dim targetRow As Long
    
    On Error Resume Next
    
    
    Application.DisplayAlerts = False
    For Each ws In ThisWorkbook.Worksheets
        If ws.Name = "NewReport" Or ws.Name = "SPF" Then
            ws.Delete
        End If
    Next ws
    Application.DisplayAlerts = True
    
    
    Set ws = ThisWorkbook.Worksheets("Report")
    If ws Is Nothing Then
        MsgBox "Sheet named 'Report' not found!", vbExclamation
        Exit Sub
    End If
    
    Set wsNew = ThisWorkbook.Worksheets.Add
    wsNew.Name = "NewReport"
    
    
    Set wsSPF = ThisWorkbook.Worksheets.Add
    wsSPF.Name = "SPF"
    
    
    ws.Rows(5).Copy Destination:=wsNew.Rows(1)
    
    
    lastRow = ws.Cells(ws.Rows.Count, "A").End(xlUp).Row
    
    
    targetRow = 2
    For i = 1 To lastRow
        If Not IsEmpty(ws.Cells(i, 1)) Then
            For j = 1 To 26
                wsNew.Cells(targetRow, j) = ws.Cells(i, j)
            Next j
            targetRow = targetRow + 1
        End If
    Next i
    
    
    On Error GoTo 0
    
    
    wsNew.Rows(2).Delete
    
    
    GroupProductsAndAssignSPF
End Sub
Sub GroupProductsAndAssignSPF()
    Dim ws As Worksheet
    Dim spfWs As Worksheet
    Dim lastRow As Long, i As Long, j As Long, spfLastRow As Long
    Dim dict As Object
    Dim productDict As Object
    Dim key As Variant, productKey As String
    Dim spfCounter As Long
    Dim spfCode As String
    Dim productInfo As String
    Dim sortedProductInfo As String
    Dim productGroups As Object
    Dim uniqueProducts As Object
    Dim product As Variant
    Dim groupProducts() As String
    Dim groupIndex As Long
    Dim existingGroup As Variant
    Dim family As String
    Dim productParts() As String
    Dim currentProduct As String
    Dim currentFamily As String
    
    On Error Resume Next
    Set ws = ThisWorkbook.Sheets("NewReport")
    On Error GoTo 0
    
    If ws Is Nothing Then
        MsgBox "NewReport sheet not found. Please make sure the sheet exists.", vbExclamation
        Exit Sub
    End If
    
    ws.Columns("B:B").Insert Shift:=xlToRight, CopyOrigin:=xlFormatFromLeftOrAbove
    ws.Cells(1, 2).Value = "SPF Code"
    
    On Error Resume Next
    Set spfWs = ThisWorkbook.Sheets("SPF")
    On Error GoTo 0
    
    If spfWs Is Nothing Then
        Set spfWs = ThisWorkbook.Sheets.Add
        spfWs.Name = "SPF"
        
        With spfWs
            .Cells(1, 1).Value = "SPF Code"
            .Cells(1, 2).Value = "Product Number"
            .Cells(1, 3).Value = "Components (Client Part Number|Substance Name|Concentration)"
            
            .Range("A1:C1").Font.Bold = True
            .Range("A1:C1").Interior.Color = RGB(200, 200, 200)
        End With
    End If
    
    spfLastRow = spfWs.Cells(spfWs.Rows.Count, "A").End(xlUp).Row
    
    spfCounter = GetLastSPFNumber(spfWs)
    
    Set dict = CreateObject("Scripting.Dictionary")
    Set productDict = CreateObject("Scripting.Dictionary")
    Set productGroups = CreateObject("Scripting.Dictionary")
    Set uniqueProducts = CreateObject("Scripting.Dictionary")
    
    For i = 2 To spfLastRow
        key = spfWs.Cells(i, "C").Value
        If Not dict.Exists(key) Then
            dict.Add key, spfWs.Cells(i, "A").Value
            productDict.Add key, spfWs.Cells(i, "B").Value
        End If
    Next i
    
    lastRow = ws.Cells(ws.Rows.Count, "D").End(xlUp).Row
    
    For i = 2 To lastRow
        product = ws.Cells(i, 4).Value
        family = ws.Cells(i, 1).Value
        If Not uniqueProducts.Exists(product & "|" & family) Then
            uniqueProducts.Add product & "|" & family, Nothing
        End If
    Next i
    
    For Each product In uniqueProducts.Keys
        productInfo = ""
        productParts = Split(product, "|")
        currentProduct = productParts(0)
        currentFamily = productParts(1)
        
        For i = 2 To lastRow
            If ws.Cells(i, 4).Value = currentProduct And ws.Cells(i, 1).Value = currentFamily Then
                productInfo = productInfo & ws.Cells(i, 11).Value & "|" & ws.Cells(i, 6).Value & "|" & ws.Cells(i, 9).Value & "--"
            End If
        Next i
        
        If Right(productInfo, 2) = "--" Then
            productInfo = Left(productInfo, Len(productInfo) - 2)
        End If
        
        sortedProductInfo = SortProductInfo(productInfo)
        
        sortedProductInfo = currentFamily & "||" & sortedProductInfo
        
        If dict.Exists(sortedProductInfo) Then
            spfCode = dict(sortedProductInfo)
            existingGroup = Split(productDict(sortedProductInfo), ", ")
            If Not IsInArray(CStr(currentProduct), existingGroup) Then
                productDict(sortedProductInfo) = productDict(sortedProductInfo) & ", " & currentProduct
            End If
        Else
            spfCounter = spfCounter + 1
            spfCode = "SPF-" & spfCounter
            dict.Add sortedProductInfo, spfCode
            productDict.Add sortedProductInfo, CStr(currentProduct)
        End If
        
        For i = 2 To lastRow
            If ws.Cells(i, 4).Value = currentProduct And ws.Cells(i, 1).Value = currentFamily Then
                ws.Cells(i, 2).Value = spfCode
            End If
        Next i
    Next product
    
    If spfLastRow > 1 Then
        spfWs.Range("A2:C" & spfLastRow).Clear
    End If
    
    spfLastRow = 1
    For Each key In dict.Keys
        spfLastRow = spfLastRow + 1
        spfWs.Cells(spfLastRow, "A").Value = dict(key)
        spfWs.Cells(spfLastRow, "B").Value = productDict(key)
        spfWs.Cells(spfLastRow, "C").Value = key
    Next key
    
    With spfWs
        .Range("A1:C" & spfLastRow).Borders.LineStyle = xlContinuous
        .Range("A:C").HorizontalAlignment = xlCenter
        .Range("A:C").VerticalAlignment = xlCenter
        .Columns("A:C").AutoFit
    End With
    
    MsgBox "Grouping and SPF assignment completed for NewReport.", vbInformation
End Sub

Function SortProductInfo(info As String) As String
    Dim parts() As String
    Dim i As Long, j As Long
    Dim temp As String
    
    parts = Split(info, "--")
    
    
    For i = LBound(parts) To UBound(parts) - 1
        For j = i + 1 To UBound(parts)
            If parts(i) > parts(j) Then
                temp = parts(i)
                parts(i) = parts(j)
                parts(j) = temp
            End If
        Next j
    Next i
    
    SortProductInfo = Join(parts, "--")
End Function

Function GetLastSPFNumber(spfWs As Worksheet) As Long
    Dim lastRow As Long
    Dim lastSPF As String
    Dim maxNumber As Long
    Dim currentNumber As Long
    
    lastRow = spfWs.Cells(spfWs.Rows.Count, "A").End(xlUp).Row
    maxNumber = 0
    
    For i = 2 To lastRow
        lastSPF = spfWs.Cells(i, "A").Value
        If Left(lastSPF, 4) = "SPF-" Then
            currentNumber = CLng(Mid(lastSPF, 5))
            If currentNumber > maxNumber Then
                maxNumber = currentNumber
            End If
        End If
    Next i
    
    GetLastSPFNumber = maxNumber
End Function

Function IsInArray(stringToBeFound As String, arr As Variant) As Boolean
    Dim i As Long
    For i = LBound(arr) To UBound(arr)
        If Trim(arr(i)) = Trim(stringToBeFound) Then
            IsInArray = True
            Exit Function
        End If
    Next i
    IsInArray = False
End Function

